Devices:  [cuda(id=0), cuda(id=1)]
Traceback (most recent call last):
  File "/home/scherbelam20/develop/sparse_wf/sparse_wf/preliminary_experiments/parallelization/test_sharding.py", line 31, in <module>
    jac = get_jacobian(params, x) # This line fails on GPUs, but works on CPUs
  File "/home/scherbelam20/develop/sparse_wf/sparse_wf/preliminary_experiments/parallelization/test_sharding.py", line 11, in get_jacobian
    return jax.vmap(jax.grad(model), in_axes=(None, 0))(params, x)
  File "/home/scherbelam20/develop/sparse_wf/sparse_wf/preliminary_experiments/parallelization/test_sharding.py", line 8, in model
    return x @ params
  File "/home/scherbelam20/.conda/envs/sparse_wf/lib/python3.12/site-packages/jax/_src/numpy/array_methods.py", line 736, in op
    return getattr(self.aval, f"_{name}")(self, *args)
  File "/home/scherbelam20/.conda/envs/sparse_wf/lib/python3.12/site-packages/jax/_src/numpy/array_methods.py", line 264, in deferring_binary_op
    return binary_op(*args)
jax._src.source_info_util.JaxStackTraceBeforeTransformation: AssertionError: Unexpected XLA sharding override: (XLA) GSPMDSharding({replicated}) != PositionalSharding([[{GPU 0}]
                    [{GPU 1}]], shape=(2, 1)) (User sharding)

The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.

--------------------

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/scherbelam20/develop/sparse_wf/sparse_wf/preliminary_experiments/parallelization/test_sharding.py", line 31, in <module>
    jac = get_jacobian(params, x) # This line fails on GPUs, but works on CPUs
          ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/scherbelam20/develop/sparse_wf/sparse_wf/preliminary_experiments/parallelization/test_sharding.py", line 11, in get_jacobian
    return jax.vmap(jax.grad(model), in_axes=(None, 0))(params, x)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AssertionError: Unexpected XLA sharding override: (XLA) GSPMDSharding({replicated}) != PositionalSharding([[{GPU 0}]
                    [{GPU 1}]], shape=(2, 1)) (User sharding)
--------------------
For simplicity, JAX has removed its internal frames from the traceback of the following exception. Set JAX_TRACEBACK_FILTERING=off to include these.
